import telebot
from telebot import types
# import subprocess
# import time
# import openai
import time
import schedule
import telebot
import random

import hashlib
import json

from backround import keep_alive
import requests

import datetime
from datetime import datetime
import os
import pytz

#######################################################################################
###############_–ü–†–û–í–ï–†–Ø–ï–¢_–ó–ê–ü–£–©–ï–ù_–õ–ò_–ë–û–¢_–ß–¢–û_–ë–´_–ù–ï_–ë–´–õ–û_–ö–û–ù–§–õ–ò–ö–¢–û–í_–°_API###############
#######################################################################################
# import logging
# import socket
# import sys
#
#
# lock_id = "MYPROCESS"
#
# __lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
#
# try:
#     __lock_socket.bind('\0' + lock_id)
#     logging.debug("Acquired lock %r" % (lock_id,))
#
# except socket.error:
#     logging.info("FAILED####################################################################################### to acquire lock %r" % (lock_id,))
#     sys.exit()
#######################################################################################
#######################################################################################

bot = telebot.TeleBot('Token')

print("Bot –ó–∞–ø—É—â–µ–Ω")

emoge = ['üëå', 'üëã', 'üëé', 'üññ', 'üëç', 'üòÉ', 'ü§ì', 'üßê', 'üòé', 'üôÉ', 'ü•≥', 'ü§ñ', 'üëæ']
random_emoge = random.choice(emoge)


if not os.path.exists('media'):
    os.makedirs('media')

users = set()  # define the users set
reactions = {}  # dictionary to store reactions
messages = {}  # dictionary to store messages IDs for each media
user_choice = {}  # dictionary to store user choices

STATE_FILE = 'state.json'


def save_state():
    state = {
        'users': list(users),
        'reactions': {k: {rk: list(rv) for rk, rv in v.items()} for k, v in reactions.items()},
        'messages': messages
    }
    with open(STATE_FILE, 'w') as f:
        json.dump(state, f)


def load_state():
    if os.path.exists(STATE_FILE) and os.path.getsize(STATE_FILE) > 0:
        with open(STATE_FILE, 'r') as f:
            state = json.load(f)
            global users, reactions, messages
            users = set(state['users'])
            reactions = {k: {rk: set(rv) for rk, rv in v.items()} for k, v in state['reactions'].items()}
            messages = state['messages']


# Load state on startup
load_state()



@bot.message_handler(commands=['start'])
def start(message):
  random_emoge = random.choice(emoge)
  # bot.send_message(message.chat.id, '1. russian ', parse_mode='Markdown')
  text = '''<code>/russ</code> –∏ –ø–ª—é—Å –ø—Ä–æ–±–µ–ª –∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n
–ü—Ä–∏–º–µ—Ä /russ 123 –µ—Å–ª–º —Ö–∏–º–∏—è —Ç–æ –Ω—É–∂–Ω–æ\n –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–æ—Ñ–∞\n
–í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è–º –Ω–∞ –Ω–∏—Ö\n
–ü–∏—à–∏ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n
_____________________________________________
1. <code>/russ</code>
2. <code>/algebra</code>
3. <code>/geometria</code>
4. <code>/himia</code>
5. <code>/physic</code>
6. <code>/eanglish</code>
7. /teoria –≤–∏–ª–∏–∫–∞—è —Ç–µ–æ—Ä–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É
_____________________________________________

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∫–∏–ª—ã - /raspisanie
–ü–æ–≥–æ–¥–∞ - /weather
–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞ - /summer
'''

  bot.send_message(message.chat.id, text, parse_mode='html')
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
  raspisan = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
  raspisan_call = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
  teoria = types.KeyboardButton("–¢–µ–æ—Ä–∏—è")
  predmet = types.KeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã")
  mems = types.KeyboardButton("Mems")
  developer = types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
  tester = types.KeyboardButton("–¢–µ—Å—Ç–µ—Ä–æ–≤—â–∏–∫–∏")
  weather_types = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
  summer = types.KeyboardButton("–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞")
  markup.add(raspisan, raspisan_call, teoria, predmet, mems, weather_types, summer, developer, tester)
  bot.send_message(message.chat.id, random_emoge, reply_markup=markup)


@bot.message_handler(commands=['help'])
def start(message):
  random_emoge = random.choice(emoge)
  # bot.send_message(message.chat.id, '1. russian ', parse_mode='Markdown')
  text = '''<code>/russ</code> –∏ –ø–ª—é—Å –ø—Ä–æ–±–µ–ª –∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n
–ü—Ä–∏–º–µ—Ä /russ 123 –µ—Å–ª–º —Ö–∏–º–∏—è —Ç–æ –Ω—É–∂–Ω–æ\n –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–æ—Ñ–∞\n
–í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è–º –Ω–∞ –Ω–∏—Ö\n
–ü–∏—à–∏ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–æ–π –∏ –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n
_____________________________________________
1. <code>/russ</code>
2. <code>/algebra</code>
3. <code>/geometria</code>
4. <code>/himia</code>
5. <code>/physic</code>
6. <code>/eanglish</code>
7. /teoria –≤–∏–ª–∏–∫–∞—è —Ç–µ–æ—Ä–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É
_____________________________________________

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∫–∏–ª—ã - /raspisanie
–ü–æ–≥–æ–¥–∞ - /weather
–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞ - /summer
  '''

  bot.send_message(message.chat.id, text, parse_mode='html')
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
  raspisan = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
  raspisan_call = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
  teoria = types.KeyboardButton("–¢–µ–æ—Ä–∏—è")
  predmet = types.KeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã")
  mems = types.KeyboardButton("Mems")
  developer = types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
  tester = types.KeyboardButton("–¢–µ—Å—Ç–µ—Ä–æ–≤—â–∏–∫–∏")
  weather_types = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
  summer = types.KeyboardButton("–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞")
  markup.add(raspisan, raspisan_call, teoria, predmet, mems, weather_types, summer, developer, tester)
  bot.send_message(message.chat.id, random_emoge, reply_markup=markup)


@bot.message_handler(commands=['weather'])
def weathers(message):
    city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    url = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
    weather_data = requests.get(url).json()
    temperature = round(weather_data['main']['temp'])
    temperature_feels = round(weather_data['main']['feels_like'])
    w_now = '–°–µ–π—á–∞—Å –≤ ' + city + ' ' + str(temperature) + ' ¬∞C'
    w_feels = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(temperature_feels) + ' ¬∞C'
    bot.send_message(message.from_user.id, w_now)
    bot.send_message(message.from_user.id, w_feels)


@bot.message_handler(commands=['summer'])
def summer(message):
    today = datetime.datetime.now()
    summer_start = datetime.datetime(today.year, 6, 1)

    if today.month > 6 or (today.month == 6 and today.day >= 21):
        summer_start = summer_start.replace(year=today.year + 1)

    time_diff = summer_start - today
    days = time_diff.days

    if days < 0:
        bot.send_message(message.chat.id, "–£–†–ê –õ–ï–¢–û")

    else:
        time_diff = summer_start - today
        days = time_diff.days
        hours, remainder = divmod(time_diff.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        bot.send_message(message.chat.id, "–î–æ –ª–µ—Ç–∞")
        bot.send_message(message.chat.id, f"{days} –¥–Ω–µ–π {hours-3} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥")
        time.sleep(0.6)


@bot.message_handler(commands=['russ'])
def kill_process(message):
  try:
    user_msg = '{0}'.format(message.text)

    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–†—Å—Å–∫–∏–π ",
          user_msg.split(' ')[1],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    if int(user_msg.split(' ')[1]) <= 417:
      bot.send_message(message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá')
      bot.send_message(
          message.chat.id, 'https://reshak.ru/otvet/reshebniki.php?otvet=' +
          user_msg.split(' ')[1] + '&predmet=razumovskaya9')
      bot.send_message(message.chat.id, '–í–æ—Ç —Ñ–æ—Ç–æ üëá')
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/reshebniki/russkijazik/9/razumovskaya/images/' +
          user_msg.split(' ')[1] + '.png')
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Ç—É')

  except:
    # bot.send_message(message.chat.id,
                     # "–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /russ 123")

      print("Error ")


@bot.message_handler(commands=['eanglish'])
def eanglish(message):
  _teaxt = '''1. –ü—Ä–∏–º–µ—Ä:\n
| <code>/eanglish module1 a 1</code> |\n \n –ø–µ—Ä–≤–æ–µ —ç—Ç–æ –º–æ–¥—É–ª—å –≤—Ç–æ—Ä–æ–µ
—ç—Ç–æ –±—É–∫–≤–∞ –º–æ–¥—É–ª—è —Ç—Ä–µ—Ç—å–µ —ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è —Å –±—É–∫–≤–æ–π
–µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'''
  bot.send_message(message.chat.id, _teaxt, parse_mode='html')

  try:
    user_msg = '{0}'.format(message.text)
    print("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ",
          user_msg.split(' ')[1],
          user_msg.split(' ')[2],
          user_msg.split(' ')[3])
    i = user_msg.split(' ')[1]

    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–ê–Ω–≥–ª–∏–π—Å–∫–∏ ",
          user_msg.split(' ')[1],
          user_msg.split(' ')[2],
          user_msg.split(' ')[3],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    print(i[6])
    if int(i[6]) <= 8:
      bot.send_message(
          message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá'
      )  #https://reshak.ru/otvet/otvet_txt.php?otvet1=/spotlight8/images/module1/a/1
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/otvet/otvet_txt.php?otvet1=/spotlight9/images/' +
          user_msg.split(' ')[1] + "/" + user_msg.split(' ')[2] + "/" +
          user_msg.split(' ')[3])
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç—É')

  except:
    # bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–µ —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /russ 123")
    print("Error")


@bot.message_handler(commands=['teoria'])
def kill_process(message):
  try:
    bot.send_message(message.chat.id, '–í–æ—Ç –≤–∏–ª–∏–∫–∞—è —Ç–µ–æ—Ä–∏—è üëá')
    bot.send_photo(message.chat.id, 'https://i.imgur.com/6TBByEL.jpeg')
    bot.send_photo(message.chat.id, 'https://i.imgur.com/2GnuFKY.jpeg')
    bot.send_photo(message.chat.id, 'https://add.pics/images/2024/02/25/IMG_20240225_210508.jpeg')

  except:
    # bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —Ä–æ–±–∏—Ç—å")
    print("Error")


@bot.message_handler(commands=['algebra'])
def kill_process(message):
  try:
    user_msg = '{0}'.format(message.text)

    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–ê–ª–≥–µ–±—Ä–∞ ",
          user_msg.split(' ')[1],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    if int(user_msg.split(' ')[1]) <= 917:
      bot.send_message(message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá')
      bot.send_message(
          message.chat.id, 'https://reshak.ru/otvet/reshebniki.php?otvet=' +
          user_msg.split(' ')[1] + '&predmet=kolyagin9')
      bot.send_message(message.chat.id, '–í–æ—Ç —Ñ–æ—Ç–æ üëá')
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/reshebniki/algebra/9/kolyagin/images1/' +
          user_msg.split(' ')[1] + '.png')
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç—É')
  except:
    # bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–æ –Ω–µ —Ö–æ—á–µ—Ç —Ä–æ–±–∏—Ç—å —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /algebra 123")
    print("Error")


@bot.message_handler(commands=['geometria'])
def kill_process(message):
  try:
    user_msg = '{0}'.format(message.text)

    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–ê–ª–≥–µ–±—Ä–∞ ",
          user_msg.split(' ')[1],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    if int(user_msg.split(' ')[1]) <= 1413:
      bot.send_message(message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá')
      bot.send_message(
          message.chat.id,
          'https://pomogalka.me/7-klass/geometriya/atanasyan/nomer-' +
          user_msg.split(' ')[1] + '/')
      bot.send_message(message.chat.id, '–í–æ—Ç —Ñ–æ—Ç–æ üëá')
      bot.send_message(
          message.chat.id, 'https://pomogalka.me/img/7-9-klass-atanasyan/' +
          user_msg.split(' ')[1] + '.png')
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç—É')
  except:
    # bot.send_message(message.chat.id,
                     # "–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /geometria 123")
    print("Error")


@bot.message_handler(commands=['himia'])
def kill_process(message):
  _teaxt = '''1. –ü—Ä–∏–º–µ—Ä:\n
  | <code>/himia 1 2</code> |\n \n –ø–µ—Ä–≤–æ–µ —ç—Ç–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—Ç–æ—Ä–æ–µ
  —ç—Ç–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'''
  bot.send_message(message.chat.id, _teaxt, parse_mode='html')
  try:
    user_msg = '{0}'.format(message.text)
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–•–∏–º–∏—è ",
          user_msg.split(' ')[1],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    if int(user_msg.split(' ')[1]) <= 55:
      bot.send_message(
          message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá'
      )  #https://reshak.ru/otvet/reshebniki.php?otvet=1/2&predmet=kuznecova9
      bot.send_message(
          message.chat.id, 'https://reshak.ru/otvet/reshebniki.php?otvet=' +
          user_msg.split(' ')[1] + "/" + user_msg.split(' ')[2] +'&predmet=kuznecova9')
      bot.send_message(message.chat.id, '–í–æ—Ç —Ñ–æ—Ç–æ üëá')
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/reshebniki/ximiya/9/kuznecova/images1/' +
          user_msg.split(' ')[1] + "/" + user_msg.split(' ')[2] + '.png')
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–æ—Ñ–∞ –Ω–µ—Ç—É')
  except:
    # bot.send_message(message.chat.id,
                     # "–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /himia 123")
    print("Error")


@bot.message_handler(commands=['physic'])
def physic(message):
  try:
    user_msg = '{0}'.format(message.text)
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–§–∏–∑–∏–∫–∞ ",
          user_msg.split(' ')[1],
          "–≤—Ä–µ–º—è -- (",
          formatted_time,
          ")",
          f" –≤–æ—Ç ID - {message.from_user.username} ",
          file=open("log.txt", "a"))

    if int(user_msg.split(' ')[1]) <= 55:
      bot.send_message(
          message.chat.id, '–í–æ—Ç c—Å—ã–ª–∫–∞ üëá'
      )  #https://reshak.ru/otvet/reshebniki.php?otvet=paragraph/33&predmet=perishkin_new8
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/otvet/reshebniki.php?otvet=paragraph/' +
          user_msg.split(' ')[1] + '&predmet=perishkin_new8')
      bot.send_message(message.chat.id, '–í–æ—Ç —Ñ–æ—Ç–æ üëá')
      bot.send_message(
          message.chat.id,
          'https://reshak.ru/reshebniki/fizika/8/perishkin_new/images1/paragraph/'
          + user_msg.split(' ')[1] + '.png')
      bot.send_message(message.chat.id, '')

    else:
      bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–æ—Ñ–∞ –Ω–µ—Ç—É')
  except:
    # bot.send_message(message.chat.id,
                     # "–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —É —Ç–µ–±—è –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ /himia 123")
      print("Error")


@bot.message_handler(content_types=['photo', 'video'])
def handle_media(message):
    try:
        if message.photo:
            file_id = message.photo[-1].file_id
            file_ext = 'jpg'
        elif message.video:
            file_id = message.video.file_id
            file_ext = 'mp4'
        else:
            return

        bot.delete_message(message.chat.id, message.message_id)
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # Save the file to a specific path
        file_path = f'media/{file_id}.{file_ext}'
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)

        user_username = message.from_user.username
        user_id = message.from_user.id

        if user_choice.get(message.chat.id) == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ":
            caption = "–û—Ç–ø—Ä–∞–≤–∏–ª - –ê–Ω–æ–Ω–∏–º—É—Å ü•∏\n"
        else:
            caption = f"–û—Ç–ø—Ä–∞–≤–∏–ª - @{user_username}\n" if user_username else f"[ID: {user_id}] '–°–º–æ—Ç—Ä–∏—Ç–µ –∫–∞–∫–æ–π –º–µ–º'\n"

        if message.caption:
            caption += f"–ü–æ–¥–ø–∏—Å—å: {message.caption}"

        # Generate a short unique ID for the file
        short_file_id = hashlib.md5(file_id.encode()).hexdigest()[:8]

        # Initialize reactions and messages for this specific short_file_id
        reactions[short_file_id] = {
            'like': set(),
            'dislike': set(),
            'kloun': set(),
            'haha': set(),
            'fack': set()
        }
        messages[short_file_id] = []

        # Create reaction buttons with correct short_file_id
        reaction_markup = types.InlineKeyboardMarkup()
        reaction_markup.add(
            types.InlineKeyboardButton(
                f'üëç {len(reactions[short_file_id]["like"])}',
                callback_data=f'like_{short_file_id}'),
            types.InlineKeyboardButton(
                f'üëé {len(reactions[short_file_id]["dislike"])}',
                callback_data=f'dislike_{short_file_id}'),
            types.InlineKeyboardButton(
                f'ü§° {len(reactions[short_file_id]["kloun"])}',
                callback_data=f'kloun_{short_file_id}'),
            types.InlineKeyboardButton(
                f'üòÇ {len(reactions[short_file_id]["haha"])}',
                callback_data=f'haha_{short_file_id}'),
            types.InlineKeyboardButton(
                f'üñï {len(reactions[short_file_id]["fack"])}',
                callback_data=f'fack_{short_file_id}'))

        # Send the media to each user and store message IDs
        for user_id in users:
            try:
                with open(file_path, 'rb') as f:
                    if message.photo:
                        sent_message = bot.send_photo(
                            user_id,
                            f,
                            caption=caption,
                            reply_markup=reaction_markup)
                    elif message.video:
                        sent_message = bot.send_video(
                            user_id,
                            f,
                            caption=caption,
                            reply_markup=reaction_markup)
                    messages[short_file_id].append(sent_message.message_id)
            except Exception as e:
                print(f"Could not send message to user {user_id}: {e}")

        # Remove the file after sending
        os.remove(file_path)

        # Save state after handling media
        save_state()

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        action, short_file_id = call.data.split('_')
        user_id = call.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ short_file_id –≤ reactions
        if short_file_id not in reactions:
            raise ValueError(
                f"Short file ID '{short_file_id}' not found in reactions.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è (like, dislike, kloun, haha, fack)
        if action == 'like':
            if user_id in reactions[short_file_id]['like']:
                reactions[short_file_id]['like'].remove(user_id)
            else:
                reactions[short_file_id]['like'].add(user_id)
                reactions[short_file_id]['dislike'].discard(user_id)
                reactions[short_file_id]['kloun'].discard(user_id)
                reactions[short_file_id]['haha'].discard(user_id)
                reactions[short_file_id]['fack'].discard(user_id)
        elif action == 'dislike':
            if user_id in reactions[short_file_id]['dislike']:
                reactions[short_file_id]['dislike'].remove(user_id)
            else:
                reactions[short_file_id]['dislike'].add(user_id)
                reactions[short_file_id]['like'].discard(user_id)
                reactions[short_file_id]['kloun'].discard(user_id)
                reactions[short_file_id]['haha'].discard(user_id)
                reactions[short_file_id]['fack'].discard(user_id)
        elif action == 'kloun':
            if user_id in reactions[short_file_id]['kloun']:
                reactions[short_file_id]['kloun'].remove(user_id)
            else:
                reactions[short_file_id]['kloun'].add(user_id)
                reactions[short_file_id]['like'].discard(user_id)
                reactions[short_file_id]['dislike'].discard(user_id)
                reactions[short_file_id]['haha'].discard(user_id)
                reactions[short_file_id]['fack'].discard(user_id)
        elif action == 'haha':
            if user_id in reactions[short_file_id]['haha']:
                reactions[short_file_id]['haha'].remove(user_id)
            else:
                reactions[short_file_id]['haha'].add(user_id)
                reactions[short_file_id]['like'].discard(user_id)
                reactions[short_file_id]['dislike'].discard(user_id)
                reactions[short_file_id]['kloun'].discard(user_id)
                reactions[short_file_id]['fack'].discard(user_id)
        elif action == 'fack':
            if user_id in reactions[short_file_id]['fack']:
                reactions[short_file_id]['fack'].remove(user_id)
            else:
                reactions[short_file_id]['fack'].add(user_id)
                reactions[short_file_id]['like'].discard(user_id)
                reactions[short_file_id]['dislike'].discard(user_id)
                reactions[short_file_id]['kloun'].discard(user_id)
                reactions[short_file_id]['haha'].discard(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ä–µ–∞–∫—Ü–∏–π
        like_count = len(reactions[short_file_id]['like'])
        dislike_count = len(reactions[short_file_id]['dislike'])
        kloun_count = len(reactions[short_file_id]['kloun'])
        haha_count = len(reactions[short_file_id]['haha'])
        fack_count = len(reactions[short_file_id]['fack'])

        new_markup = types.InlineKeyboardMarkup()
        new_markup.add(
            types.InlineKeyboardButton(f'üëç {like_count}',
                                       callback_data=f'like_{short_file_id}'),
            types.InlineKeyboardButton(
                f'üëé {dislike_count}',
                callback_data=f'dislike_{short_file_id}'),
            types.InlineKeyboardButton(f'ü§° {kloun_count}',
                                       callback_data=f'kloun_{short_file_id}'),
            types.InlineKeyboardButton(f'üòÇ {haha_count}',
                                       callback_data=f'haha_{short_file_id}'),
            types.InlineKeyboardButton(f'üñï {fack_count}',
                                       callback_data=f'fack_{short_file_id}'))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id in users:
            for message_id in messages[short_file_id]:
                try:
                    bot.edit_message_reply_markup(chat_id=user_id,
                                                  message_id=message_id,
                                                  reply_markup=new_markup)
                except Exception as e:
                    print(f"Could not update message for user {user_id}: {e}")

        bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {action}")

        # Save state after updating reactions
        save_state()

    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")



@bot.message_handler(commands=['raspisanie'])
def raspisanie(message):
    bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üëá")
    bot.send_photo(message.chat.id, "https://i.postimg.cc/VLzCLgPr/IMG-20240410-215628.jpg")
    # current_time = datetime.datetime.now()
    # formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    # day_of_week = datetime.datetime.today().weekday()
    moscow_timezone = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.datetime.now(moscow_timezone)
    day_of_week = moscow_time.weekday()

    days_of_week = {
      0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      1: "–í—Ç–æ—Ä–Ω–∏–∫",
      2: "–°—Ä–µ–¥–∞",
      3: "–ß–µ—Ç–≤–µ—Ä–≥",
      4: "–ü—è—Ç–Ω–∏—Ü–∞",
      5: "–°—É–±–±–æ—Ç–∞",
      6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    print(days_of_week[day_of_week])
    # bot.send_messge(message.chat.id, "–°–µ–≥–æ–¥–Ω—è", days_of_week[day_of_week])

    if days_of_week[day_of_week] == "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
        bot.send_message(message.chat.id, "–ì—Ä—ë–±–∞–Ω–Ω—ã–π –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö")
        raspis = ('''1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –ù–ï –≤–∞–∂–Ω–æ–º</b> - 8:00 - 9:15
2. <b>–§–∏–∑-—Ä–∞</b> - 9:35 - 10:20
3. <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 10:40 - 11:25
4. <b>–†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>–õ–∏—Ç-—Ä–∞</b> - 12:45 - 13:30
6. <b>–•–∏–º–∏—è</b> - 13:40 - 14:25
7. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 14:30 - 15:15''')
        bot.send_message(message.chat.id, raspis, parse_mode='html')
        bot.send_message(message.chat.id, "üò©")

    if days_of_week[day_of_week] == "–í—Ç–æ—Ä–Ω–∏–∫":
      bot.send_message(message.chat.id, "–í—Ç–æ—Ä–Ω–∏–∫ –∫–∞–∫–∏–µ 8 —É—Ä–æ–∫–æ–≤")
      raspis = ('''1. <b>–§–∏–∑-—Ä–∞</b> - 8:30 - 9:15
2. <b>–†—É—Å—Å–∫–∏–π</b> - 9:35 - 10:20
3. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 10:40 - 11:25
4. <b>–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>–õ–∏—Ç-—Ä–∞</b> - 12:45 - 13:30
6. <b>–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ</b> - 13:40 - 14:25
7. <b>–ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 15:15
8. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä</b> - 15:20 - 16:05''')
      bot.send_message(message.chat.id, raspis, parse_mode='html')
      bot.send_message(message.chat.id, "ü§Ø")

    if days_of_week[day_of_week] == "–°—Ä–µ–¥–∞":
      bot.send_message(message.chat.id, "–°—Ä–µ–¥–∞ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ")
      raspis = ('''1. <b>–§–∏–∑–∏–∫–∞</b> - 8:30 - 9:15
2. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 9:35 - 10:20
3. <b>–ò–Ω—Ñ 2–≥—Ä. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä.</b> - 10:40 - 11:25
4. <b>–û–ë–ñ</b> - 11:40 - 12:25
5. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 12:45 - 13:30
6. <b>–†—É—Å—Å–∫–∏–π</b> - 13:40 - 14:25
7. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2–≥—Ä</b> - 14:30 - 16:05''')
      bot.send_message(message.chat.id, raspis, parse_mode='html')
      bot.send_message(message.chat.id, "ü§¨")

    if days_of_week[day_of_week] == "–ß–µ—Ç–≤–µ—Ä–≥":
      bot.send_message(message.chat.id, "–ß–µ—Ç–≤–µ—Ä–≥ :(")
      raspis = ('''1. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä.</b> - 8:30 - 9:15
2. <b>–†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2–≥—Ä.</b> - 9:35 - 10:20
3. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
4. <b>–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 12:45 - 13:30
6. <b>–•–∏–º–∏—è</b> - 13:40 - 14:25
7. <b>–ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 16:05''')
      bot.send_message(message.chat.id, raspis, parse_mode='html')
      bot.send_message(message.chat.id, "ü´†")

    if days_of_week[day_of_week] == "–ü—è—Ç–Ω–∏—Ü–∞":
      bot.send_message(message.chat.id, "–£—Ä–∞ –ü—è—Ç–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å")
      raspis = raspis = ('''1. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 8:30 - 9:15
2. <b>–§–∏–∑-—Ä–∞ - 9:35</b> - 10:20
3. <b>–§–∏–∑–∏–∫–∞ - 10:40</b> - 11:35
4. <b>–ò–ó–û - 11:40</b> - 12:25
5. <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</b> - 12:45 - 13:30
6. <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</b> - 13:40 - 14:25
7. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏ 2–≥—Ä.</b> - 14:30 - 16:05''')
      bot.send_message(message.chat.id, raspis,  parse_mode='html')
      bot.send_message(message.chat.id, "ü•≥")

    if days_of_week[day_of_week] == "–°—É–±–±–æ—Ç–∞":
        raspis = ("–°–µ–≥–æ–¥–Ω—è –°—É–±–±–æ—Ç–∞ –≤ —à–∫–æ–ª—É –Ω–µ –Ω–∞–¥–æ")
        bot.send_message(message.chat.id, raspis)
        bot.send_message(message.chat.id, "üòé")

    if days_of_week[day_of_week] == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
        raspis = ("–°–µ–≥–æ–¥–Ω—è –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–∞–∫ —á—Ç–æ –≤ —à–∫–∏–ª—É –Ω–µ –Ω–∞–¥–æ —á–∏–∏–∏–∏–∏–∏–ª")
        bot.send_message(message.chat.id, raspis)
        bot.send_message(message.chat.id, "üòé")

        current_time = datetime.datetime.now()
        formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º—è -- (",
        formatted_time,
        ")",
        f" –≤–æ—Ç ID - {message.from_user.username} ",
        file=open("log.txt", "a"))


##############################TEXT##############################################


@bot.message_handler(content_types=['text'])
def text(message):
    get_message_bot = message.text.strip().lower()

    if message.text == '–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫':
        bot.send_message(message.chat.id, "–Å–±–∞–Ω—ã–π —Ä—É—Å—Å–∫–∏–π")

    if message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üëá")
        bot.send_photo(message.chat.id, "https://i.postimg.cc/VLzCLgPr/IMG-20240410-215628.jpg")
        # current_time = datetime.datetime.now()
        # formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

        # day_of_week = datetime.datetime.today().weekday()
        moscow_timezone = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.now(moscow_timezone)
        day_of_week = moscow_time.weekday()

        days_of_week = {
            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–í—Ç–æ—Ä–Ω–∏–∫",
            2: "–°—Ä–µ–¥–∞",
            3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞",
            5: "–°—É–±–±–æ—Ç–∞",
            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        # days_of_week[day_of_week] = "–í–æ —Å–∫—Ä–µ—Å–µ–Ω—å–µ"

        # print(days_of_week[day_of_week])
        # bot.send_messge(message.chat.id, "–°–µ–≥–æ–¥–Ω—è", days_of_week[day_of_week])

        if days_of_week[day_of_week] == "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
            bot.send_message(message.chat.id, "–ì—Ä—ë–±–∞–Ω–Ω—ã–π –ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö")
            raspis = ('''1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –ù–ï –≤–∞–∂–Ω–æ–º</b> - 8:00 - 9:15
    2. <b>–§–∏–∑-—Ä–∞</b> - 9:35 - 10:20
    3. <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 10:40 - 11:25
    4. <b>–†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
    5. <b>–õ–∏—Ç-—Ä–∞</b> - 12:45 - 13:30
    6. <b>–•–∏–º–∏—è</b> - 13:40 - 14:25
    7. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 14:30 - 15:15''')
            bot.send_message(message.chat.id, raspis, parse_mode='html')
            bot.send_message(message.chat.id, "üò©")

        if days_of_week[day_of_week] == "–í—Ç–æ—Ä–Ω–∏–∫":
            bot.send_message(message.chat.id, "–í—Ç–æ—Ä–Ω–∏–∫ –∫–∞–∫–∏–µ 8 —É—Ä–æ–∫–æ–≤")
            raspis = ('''1. <b>–§–∏–∑-—Ä–∞</b> - 8:30 - 9:15
    2. <b>–†—É—Å—Å–∫–∏–π</b> - 9:35 - 10:20
    3. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 10:40 - 11:25
    4. <b>–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
    5. <b>–õ–∏—Ç-—Ä–∞</b> - 12:45 - 13:30
    6. <b>–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ</b> - 13:40 - 14:25
    7. <b>–ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 15:15
    8. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä</b> - 15:20 - 16:05''')
            bot.send_message(message.chat.id, raspis, parse_mode='html')
            bot.send_message(message.chat.id, "ü§Ø")

        if days_of_week[day_of_week] == "–°—Ä–µ–¥–∞":
            bot.send_message(message.chat.id, "–°—Ä–µ–¥–∞ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ")
            raspis = ('''1. <b>–§–∏–∑–∏–∫–∞</b> - 8:30 - 9:15
    2. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 9:35 - 10:20
    3. <b>–ò–Ω—Ñ 2–≥—Ä. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä.</b> - 10:40 - 11:25
    4. <b>–û–ë–ñ</b> - 11:40 - 12:25
    5. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 12:45 - 13:30
    6. <b>–†—É—Å—Å–∫–∏–π</b> - 13:40 - 14:25
    7. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2–≥—Ä</b> - 14:30 - 16:05''')
            bot.send_message(message.chat.id, raspis, parse_mode='html')
            bot.send_message(message.chat.id, "ü§¨")

        if days_of_week[day_of_week] == "–ß–µ—Ç–≤–µ—Ä–≥":
            bot.send_message(message.chat.id, "–ß–µ—Ç–≤–µ—Ä–≥ :(")
            raspis = ('''1. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π 1–≥—Ä.</b> - 8:30 - 9:15
    2. <b>–†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 2–≥—Ä.</b> - 9:35 - 10:20
    3. <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
    4. <b>–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
    5. <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 12:45 - 13:30
    6. <b>–•–∏–º–∏—è</b> - 13:40 - 14:25
    7. <b>–ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 16:05''')
            bot.send_message(message.chat.id, raspis, parse_mode='html')
            bot.send_message(message.chat.id, "ü´†")

        if days_of_week[day_of_week] == "–ü—è—Ç–Ω–∏—Ü–∞":
            bot.send_message(message.chat.id, "–£—Ä–∞ –ü—è—Ç–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å")
            raspis = raspis = ('''1. <b>–ê–ª–≥–µ–±—Ä–∞</b> - 8:30 - 9:15
    2. <b>–§–∏–∑-—Ä–∞ - 9:35</b> - 10:20
    3. <b>–§–∏–∑–∏–∫–∞ - 10:40</b> - 11:35
    4. <b>–ò–ó–û - 11:40</b> - 12:25
    5. <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</b> - 12:45 - 13:30
    6. <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</b> - 13:40 - 14:25
    7. <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏ 2–≥—Ä.</b> - 14:30 - 16:05''')
            bot.send_message(message.chat.id, raspis, parse_mode='html')
            bot.send_message(message.chat.id, "ü•≥")

        if days_of_week[day_of_week] == "–°—É–±–±–æ—Ç–∞":
            raspis = ("–°–µ–≥–æ–¥–Ω—è –°—É–±–±–æ—Ç–∞ –≤ —à–∫–æ–ª—É –Ω–µ –Ω–∞–¥–æ")
            bot.send_message(message.chat.id, raspis)
            bot.send_message(message.chat.id, "üòé")

        if days_of_week[day_of_week] == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            raspis = ("–°–µ–≥–æ–¥–Ω—è –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–∞–∫ —á—Ç–æ –≤ —à–∫–∏–ª—É –Ω–µ –Ω–∞–¥–æ —á–∏–∏–∏–∏–∏–∏–ª")
            bot.send_message(message.chat.id, raspis)
            bot.send_message(message.chat.id, "üòé")
        ##################################################################################

        current_time = datetime.now()
        formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

        print(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º—è –í–æ—Ç ID - {message.from_user.username} ",
              f"–≤—Ä–µ–º—è -- ({formatted_time})\n",
              file=open("log_mem.txt", "a"))



    if message.text == '–õ–∞–∫–∏':
        bot.send_photo(message.chat.id, "https://i.imgur.com/5OotKDV.jpeg")


    get_message_bot = message.text.strip().lower()

    if message.text == "Mems":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        send_mem = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º")
        send_anonymous = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")
        markup.add(send_mem, send_anonymous)
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º:',
                         reply_markup=markup)



    elif message.text in ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        raspisan = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        raspisan_call = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
        teoria = types.KeyboardButton("–¢–µ–æ—Ä–∏—è")
        predmet = types.KeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã")
        mems = types.KeyboardButton("Mems")
        developer = types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        tester = types.KeyboardButton("–¢–µ—Å—Ç–µ—Ä–æ–≤—â–∏–∫–∏")
        weather_types = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
        summer = types.KeyboardButton("–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞")
        markup.add(raspisan, raspisan_call, teoria, predmet, mems, weather_types, summer, developer, tester)

        user_choice[message.chat.id] = message.text
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ', reply_markup=markup)

        current_time = datetime.now()
        formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
        print(f"–≤–æ—Ç ID - {message.from_user.username} ",
              f"–≤—Ä–µ–º—è -- ({formatted_time})\n",
              file=open("log_mem.txt", "a"))

        if message.chat.id not in users:
            users.add(message.chat.id)
        save_state()

    if message.text == '–¢–µ—Å—Ç–µ—Ä–æ–≤—â–∏–∫–∏':
        testr_spisk = '''1. @collector0133
2. @bobr15243
3. @oohhhhmygooodness'''
        bot.send_message(message.chat.id, "–í–æ—Ç –æ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤")
        bot.send_message(message.chat.id,testr_spisk)
        bot.send_message(message.chat.id, 'üòé')


    if message.text == '–ü—Ä–µ–¥–º–µ—Ç—ã':
        random_emoge = random.choice(emoge)
        text = '''<code>/russ</code> –∏ –ø–ª—é—Å –ø—Ä–æ–±–µ–ª –∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n
        –ü—Ä–∏–º–µ—Ä /russ 123 –µ—Å–ª–º —Ö–∏–º–∏—è —Ç–æ –Ω—É–∂–Ω–æ\n –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–≥—Ä–æ—Ñ–∞\n
        –í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è–º –Ω–∞ –Ω–∏—Ö\n
        _____________________________________________
        1. <code>/russ</code>
        2. <code>/algebra</code>
        3. <code>/geometria</code>
        4. <code>/himia</code>
        5. <code>/physic</code>
        6. <code>/eanglish</code>
        7. /teoria –≤–∏–ª–∏–∫–∞—è —Ç–µ–æ—Ä–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É
        _____________________________________________
        
        –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∫–∏–ª—ã - /raspisanie
        –ü–æ–≥–æ–¥–∞ - /weather
        –°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞ - /summer
        '''
        bot.send_message(message.chat.id, text, parse_mode='html')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        raspisan = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        raspisan_call = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
        teoria = types.KeyboardButton("–¢–µ–æ—Ä–∏—è")
        predmet = types.KeyboardButton("–ü—Ä–µ–¥–º–µ—Ç—ã")
        mems = types.KeyboardButton("Mems")
        developer = types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        tester = types.KeyboardButton("–¢–µ—Å—Ç–µ—Ä–æ–≤—â–∏–∫–∏")
        weather_types = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
        summer = types.KeyboardButton("–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞")
        markup.add(raspisan, raspisan_call, teoria, predmet, mems, weather_types, summer, developer, tester)
        bot.send_message(message.chat.id, random_emoge, reply_markup=markup)


    if message.text == '–ü–æ–≥–æ–¥–∞':
        city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        url = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric&lang=ru&appid=79d1ca96933b0328e1c7e3e7a26cb347'
        weather_data = requests.get(url).json()
        temperature = round(weather_data['main']['temp'])
        temperature_feels = round(weather_data['main']['feels_like'])
        w_now = '–°–µ–π—á–∞—Å –≤ ' + city + ' ' + str(temperature) + ' ¬∞C'
        w_feels = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ' + str(temperature_feels) + ' ¬∞C'
        bot.send_message(message.from_user.id, w_now)
        bot.send_message(message.from_user.id, w_feels)


    if message.text == '–°–∫–æ–ª—å–∫–æ –¥–æ –ª–µ—Ç–∞':
        url = "https://www.calc.ru/dney-do-leta.html"
        response = requests.get(url)
        response.encoding = response.apparent_encoding  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        soup = BeautifulSoup(response.text, 'html.parser')
        countdown_div = soup.find('div', id='count')

        if countdown_div:
            countdown_text = countdown_div.get_text(strip=True)
            bot.send_message(message.chat.id,f"–î–æ –ª–µ—Ç–∞ 2025 –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å\n <b>{countdown_text}</b>", parse_mode='html')

        else:
            bot.send_message(message.chat.id,"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")

    if message.text == '–¢–µ–æ—Ä–∏—è':
        bot.send_message(message.chat.id, "–í–∏–ª–∏–∫–∞—è —Ç–µ–æ—Ä–∏—è üëá")
        bot.send_photo(message.chat.id, 'https://i.imgur.com/H4Cvv6U.jpeg')
        bot.send_photo(message.chat.id, 'https://i.imgur.com/zvXrxoj.jpeg')
        bot.send_photo(message.chat.id, 'https://add.pics/images/2024/02/25/IMG_20240225_210508.jpeg')

    if message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
        raspisanie_ = '''1) 8:30 - 9:15
2) 9:35 - 10:20
3) 10:40 - 11:25
4) 11:40 - 12:25
5) 12:45 - 13:30
6) 13:40 - 14:25
7) 14:30 - 15:15
8) 15:20 - 16:05'''
        bot.send_message(message.chat.id, raspisanie_)
        # bot.send_photo(message.chat.id,'')

    if message.text == '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫':
        text_developer = '''–Ø @Aboba868 —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å\n–º–Ω–µ –Ω–∞–∫–∏–¥–∞–≤ –∑–≤—ë–∑–¥–æ—á–µ–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç git hub –ø–∂\n '''
        bot.send_message(message.chat.id, text_developer)
        bot.send_message(message.chat.id, '–í–æ—Ç –Ω–∞–∫–∏–¥–∞–π —Å—é–¥–∞ –∑–≤—ë–∑–¥–æ—á–µ–∫ üëá')
        bot.send_message(message.chat.id, 'https://github.com/Vova2808/GDZ_bot')
        bot.send_message(message.chat.id, 'üòé')

    iphone_or_android = [
      'Iphone –∏–ª–∏ Android', 'iphone –∏–ª–∏ android', '–∞–π—Ñ–æ–Ω –∏–ª–∏ –∞–Ω–¥—Ä–æ–∏–¥',
      '–ê–π—Ñ–æ–Ω –∏–ª–∏ –ê–Ω–¥—Ä–æ–∏–¥', '–ê–π—Ñ–æ–Ω –∏–ª–∏ –∞–Ω–¥—Ä–æ–∏–¥', '–∞–π—Ñ–æ–Ω –∏–ª–∏ –ê–Ω–¥—Ä–æ–∏–¥'
    ]

    iphone_govno = [
      'Iphone –ø–æ–ª–Ω–æ–µ –≥–æ–≤–Ω–æ', 'Iphone –≤–æ–æ–±—â–µ –≥–æ–≤–Ω–æ', 'Iphone —à–ª–∞–∫',
      '–ö–æ–Ω–µ—á–Ω–æ Android Iphone –≥–æ–≤–Ω–æ –ø–æ–ª–Ω–æ–µ'
    ]
    random_phrase = random.choice(iphone_govno)

    if message.text in iphone_or_android:
        bot.send_message(message.chat.id, random_phrase)


  # else:
  #     bot.send_message(message.chat.id, '–ß–µ–≥–æ –Ω–∞–ø–∏—à–∏ /help')



keep_alive()

bot.infinity_polling()

bot.polling(none_stop=True)
