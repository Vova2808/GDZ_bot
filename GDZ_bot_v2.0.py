import telebot
from telebot import types
# import subprocess
# import time
# import openai
import time
import schedule
import telebot
import random

import hashlib
import json

from backround import keep_alive
import requests

import datetime
from datetime import datetime, timedelta
import os
import pytz





bot = telebot.TeleBot('7669086286:AAGTBW0iEW_w76o9jtUnk-U9OpNEiETAB0M')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –±–∞–ª–∞–Ω—Å–∞–º–∏
BALANCE_FILE = 'user_balances.json'
initial_balance = 100


bot_data = {}
user_status = {}
user_data = {}
message_data = {}


reactions = {}
messages = {}
users = set()
user_choice = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

def set_bot_commands():
    commands = [
        telebot.types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        telebot.types.BotCommand(command="/help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å")
    ]
    bot.set_my_commands(commands)


set_bot_commands()


# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_balances():
    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, 'r') as f:
            return json.load(f)
    else:
        return {}


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_balances():
    with open(BALANCE_FILE, 'w') as f:
        json.dump(user_balances, f)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–æ–≤
print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {BALANCE_FILE}...")
user_balances = load_balances()


@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_id = str(message.from_user.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç
    if user_id not in user_balances:
        user_balances[user_id] = initial_balance
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance} üçÜ")
        save_balances()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup_start = types.InlineKeyboardMarkup(row_width=1)
    predmet = types.InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data='predmet')
    raspisan = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ —Å–µ–≥–æ–¥–Ω—è)', callback_data='raspisan')
    raspisan_all = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é)', callback_data='raspisan_all')
    # dz = types.InlineKeyboardButton("üè´ –î/–ó", callback_data='dz')
    raspisan_call = types.InlineKeyboardButton('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', callback_data='raspisan_call')
    # teoria = types.InlineKeyboardButton('üìù –¢–µ–æ—Ä–∏—è', callback_data='teoria')
    top = types.InlineKeyboardButton('üîù –¢–æ–ø –ø–æ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º', callback_data='top')
    baklagan = types.InlineKeyboardButton('üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω', callback_data='baklagan')
    # mems = types.InlineKeyboardButton('üòÇ –ú–µ–º—ã (–ü–∏–∑–¥–µ—Ü —Å–º–µ—à–Ω–æ)', callback_data='mems')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup_start.add(predmet, raspisan, raspisan_all, raspisan_call, top, baklagan)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    text_start = f'''üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚åµ\n
<b>‚ï≠ Username:</b> <code>{message.from_user.username}</code>
<b>‚îú User ID:</b> <code>{message.from_user.id}</code>
<b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
'''
    photo_start = open('start.jpg', 'rb')
    msg_start = bot.send_photo(message.chat.id, photo_start, caption=text_start, parse_mode='HTML', reply_markup=markup_start)

    bot_data[message.chat.id] = {
        'message_id': msg_start.message_id,
        'photo': photo_start
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
user_click_data = {}


@bot.callback_query_handler(func=lambda call: call.data == 'mems')
def mems_menu(call):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç
    if call.message.text:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        send_mem = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º")
        send_anonymous = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")
        markup.add(send_mem, send_anonymous)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ",
                              reply_markup=markup)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        send_mem = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º")
        send_anonymous = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")
        markup.add(send_mem, send_anonymous)
        bot.send_message(call.message.chat.id,
                         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ",
                         reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = str(call.from_user.id)
    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_id not in user_click_data:
        user_click_data[user_id] = {'last_click': current_time - timedelta(seconds=1)}

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —á–∞—â–µ, —á–µ–º –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—ã)
    if (current_time - user_click_data[user_id]['last_click']).total_seconds() < 1:
        bot.answer_callback_query(call.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º.")
        return

    if call.message.caption:
        # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç 5 –¥–æ 15 –±–∞–∫–ª–∞–∂–∞–Ω–æ–≤
        earned_baklagans = random.randint(5, 15)
        user_balances[user_id] += earned_baklagans
        user_click_data[user_id]['last_click'] = current_time

        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª {earned_baklagans} –±–∞–∫–ª–∞–∂–∞–Ω–æ–≤. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]} üçÜ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        save_balances()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
        bot.answer_callback_query(call.id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {earned_baklagans} üçÜ –±–∞–∫–ª–∞–∂–∞–Ω–æ–≤!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        text_start = f'''üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚åµ\n
<b>‚ï≠ Username:</b> <code>{call.from_user.username}</code>
<b>‚îú User ID:</b> <code>{call.from_user.id}</code>
<b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
'''
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text_start, parse_mode='HTML', reply_markup=call.message.reply_markup)

    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç
        print("–ü–æ–¥–ø–∏—Å–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    if call.data == 'back_to_menu':
        bot.answer_callback_query(call.id, "üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        text_start = f'''üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚åµ\n
<b>‚ï≠ Username:</b> <code>{call.message.from_user.username}</code>
<b>‚îú User ID:</b> <code>{call.message.from_user.id}</code>
<b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
'''

        markup_menu = types.InlineKeyboardMarkup(row_width=1)
        predmet = types.InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data='predmet')
        raspisan = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ —Å–µ–≥–æ–¥–Ω—è)', callback_data='raspisan')
        raspisan_all = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é)', callback_data='raspisan_all')
        # dz = types.InlineKeyboardButton("üè´ –î/–ó", callback_data='dz')
        raspisan_call = types.InlineKeyboardButton('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', callback_data='raspisan_call')
        # teoria = types.InlineKeyboardButton('üìù –¢–µ–æ—Ä–∏—è', callback_data='teoria')
        top = types.InlineKeyboardButton('üîù –¢–æ–ø –ø–æ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º', callback_data='top')
        baklagan = types.InlineKeyboardButton('üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω', callback_data='baklagan')
        # mems = types.InlineKeyboardButton('üòÇ –ú–µ–º—ã (–ü–∏–∑–¥–µ—Ü —Å–º–µ—à–Ω–æ)', callback_data='mems')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup_menu.add(predmet, raspisan, raspisan_all, raspisan_call, top, baklagan)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text_start, parse_mode='HTML', reply_markup=markup_menu)


    if call.data == 'predmet':
        bot.answer_callback_query(call.id, "üìö –ü—Ä–µ–¥–º–µ—Ç—ã")
        markup_predmet = types.InlineKeyboardMarkup()
        algebra = types.InlineKeyboardButton("‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó", callback_data='algebra')
        geometria = types.InlineKeyboardButton("üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è", callback_data='geometria')
        russ = types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='russ')
        english = types.InlineKeyboardButton("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='english')
        phisic = types.InlineKeyboardButton("‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé", callback_data='phisic')
        # himia = types.InlineKeyboardButton("üë©‚Äçüî¨–•–∏–º–∏—è", callback_data='himia')
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')

        markup_predmet.add(algebra, geometria)
        markup_predmet.add(russ, english)
        markup_predmet.add(phisic)
        markup_predmet.add(back)


        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup_predmet)

    if call.data == 'raspisan':
        moscow_timezone = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.now(moscow_timezone)
        day_of_week = moscow_time.weekday()

        days_of_week = {
            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            1: "–í—Ç–æ—Ä–Ω–∏–∫",
            2: "–°—Ä–µ–¥–∞",
            3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞",
            5: "–°—É–±–±–æ—Ç–∞",
            6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        # print(days_of_week[day_of_week])

        if days_of_week[day_of_week] == "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
            raspis = ('''–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
            
1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º</b> - 8:30 - 9:15
2. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 9:35 - 10:20
3. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üìú –ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b> - 12:45 - 13:30
6. <b>–§–∏–∑–∏–∫</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15

–í—Ç–æ—Ä–Ω–∏–∫:
            
1. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 8:30 - 9:15
2. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 9:35 - 10:20
3. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 10:40 - 11:25
4. <b>üßç –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ</b> - 11:40 - 12:25
5. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 12:45 - 13:30
6. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 13:40 - 14:25
7. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 14:30 - 15:15''')
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)


        if days_of_week[day_of_week] == "–í—Ç–æ—Ä–Ω–∏–∫":
            raspis = ('''–í—Ç–æ—Ä–Ω–∏–∫:
            
1. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 8:30 - 9:15
2. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 9:35 - 10:20
3. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 10:40 - 11:25
4. <b>üßç –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ</b> - 11:40 - 12:25
5. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 12:45 - 13:30
6. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 13:40 - 14:25
7. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 14:30 - 15:15

–°—Ä–µ–¥–∞:
            
1. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 8:30 - 9:15
2. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 9:35 - 10:20
3. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</b> - 12:45 - 13:30
6. <b>üíª –¢—Ä—É–¥</b> - 13:40 - 14:25
7. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 16:05''')
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

        if days_of_week[day_of_week] == "–°—Ä–µ–¥–∞":
            raspis = ('''–°—Ä–µ–¥–∞:
            
1. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 8:30 - 9:15
2. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 9:35 - 10:20
3. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</b> - 12:45 - 13:30
6. <b>üíª –¢—Ä—É–¥</b> - 13:40 - 14:25
7. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 16:05

–ß–µ—Ç–≤–µ—Ä–≥:
            
1. <b>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</b> - 8:30 - 9:15
2. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 9:35 - 10:20
3. <b>üìú –ò—Å—Ç–æ—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 12:45 - 13:30
6. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15
8. <b>–û–ë–ó–†</b> - 15:20 - 16:05 ''')
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

        if days_of_week[day_of_week] == "–ß–µ—Ç–≤–µ—Ä–≥":
            raspis = ('''–ß–µ—Ç–≤–µ—Ä–≥:
            
1. <b>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</b> - 8:30 - 9:15
2. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 9:35 - 10:20
3. <b>üìú –ò—Å—Ç–æ—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 12:45 - 13:30
6. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15
8. <b>–û–ë–ó–†</b> - 15:20 - 16:05 

–ü—è—Ç–Ω–∏—Ü–∞:
            
1. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 8:30 - 9:15
2. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - 9:35</b> - 10:20
3. <b>üìú –ò—Å—Ç–æ—Ä–∏—è - 10:40</b> - 11:35
4. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé - 11:40</b> - 12:25
5. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 12:45 - 13:30
6. <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç.</b> - 13:40 - 14:25''')
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

        if days_of_week[day_of_week] == "–ü—è—Ç–Ω–∏—Ü–∞":
            raspis = ('''–ü—è—Ç–Ω–∏—Ü–∞:
            
1. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 8:30 - 9:15
2. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - 9:35</b> - 10:20
3. <b>üìú –ò—Å—Ç–æ—Ä–∏—è - 10:40</b> - 11:35
4. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé - 11:40</b> - 12:25
5. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 12:45 - 13:30
6. <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç.</b> - 13:40 - 14:25''')
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

        if days_of_week[day_of_week] == "–°—É–±–±–æ—Ç–∞":
            raspis = '''üòé –°–µ–≥–æ–¥–Ω—è –°—É–±–±–æ—Ç–∞ –≤ —à–∫–æ–ª—É –Ω–µ –Ω–∞–¥–æ
            
<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>         
1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º</b> - 8:30 - 9:15
2. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 9:35 - 10:20
3. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üìú–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b> - 12:45 - 13:30
6. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15'''
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

        if days_of_week[day_of_week] == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            raspis = '''üòé–°–µ–≥–æ–¥–Ω—è –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–∞–∫ —á—Ç–æ –≤ —à–∫–∏–ª—É –Ω–µ –Ω–∞–¥–æ
            
<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>          
1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º</b> - 8:30 - 9:15
2. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 9:35 - 10:20
3. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üìú–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫</b> - 12:45 - 13:30
6. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15'''
            bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     caption=raspis, parse_mode='HTML', reply_markup=call.message.reply_markup)

    if call.data == 'raspisan_all':
        raspis = '''---------------------------------------
<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>         
1. <b>–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º</b> - 8:30 - 9:15
2. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 9:35 - 10:20
3. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üìú–ò—Å—Ç–æ—Ä–∏—è</b> - 11:40 - 12:25
5. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫</b> - 12:45 - 13:30
6. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15
---------------------------------------
<b>–í—Ç–æ—Ä–Ω–∏–∫:</b>
1. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 8:30 - 9:15
2. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 9:35 - 10:20
3. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 10:40 - 11:25
4. <b>üßç –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ</b> - 11:40 - 12:25
5. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 12:45 - 13:30
6. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 13:40 - 14:25
7. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé</b> - 14:30 - 15:15
---------------------------------------
<b>–°—Ä–µ–¥–∞:</b>
1. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 8:30 - 9:15
2. <b>üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è</b> - 9:35 - 10:20
3. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</b> - 12:45 - 13:30
6. <b>üíª –¢—Ä—É–¥</b> - 13:40 - 14:25
7. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 14:30 - 16:05
---------------------------------------
<b>–ß–µ—Ç–≤–µ—Ä–≥:</b>
1. <b>–ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è</b> - 8:30 - 9:15
2. <b>‚öΩÔ∏è–§–∏–∑-—Ä–∞</b> - 9:35 - 10:20
3. <b>üìú–ò—Å—Ç–æ—Ä–∏—è</b> - 10:40 - 11:25
4. <b>üá∑üá∫ –†—É—Å—Å–∫–∏–π</b> - 11:40 - 12:25
5. <b>üë©‚Äçüî¨–•–∏–º–∏—è</b> - 12:45 - 13:30
6. <b>‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó</b> - 13:40 - 14:25
7. <b>üìñ –õ–∏—Ç-—Ä–∞</b> - 14:30 - 15:15
8. <b>–û–ë–ó–†</b> - 15:20 - 16:05
---------------------------------------
<b>–ü—è—Ç–Ω–∏—Ü–∞:</b>
1. <b>üß¨ –ë–∏–æ–ª–æ–≥–∏—è</b> - 8:30 - 9:15
2. <b>üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - 9:35</b> - 10:20
3. <b>üìú –ò—Å—Ç–æ—Ä–∏—è - 10:40</b> - 11:35
4. <b>‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé - 11:40</b> - 12:25
5. <b>üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - 12:45 - 13:30
6. <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç.</b> - 13:40 - 14:25
---------------------------------------'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(call.message.chat.id, raspis, parse_mode='HTML', reply_markup=markup_predmet)


    if call.data == 'back_to_menu_':
        bot.answer_callback_query(call.id, "üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup_start = types.InlineKeyboardMarkup(row_width=1)
        predmet = types.InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data='predmet')
        raspisan = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ —Å–µ–≥–æ–¥–Ω—è)', callback_data='raspisan')
        raspisan_all = types.InlineKeyboardButton('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é)', callback_data='raspisan_all')
        # dz = types.InlineKeyboardButton("üè´ –î/–ó", callback_data='dz')
        raspisan_call = types.InlineKeyboardButton('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', callback_data='raspisan_call')
        # teoria = types.InlineKeyboardButton('üìù –¢–µ–æ—Ä–∏—è', callback_data='teoria')
        top = types.InlineKeyboardButton('üîù –¢–æ–ø –ø–æ –±–∞–∫–ª–∞–∂–∞–Ω–∞–º', callback_data='top')
        baklagan = types.InlineKeyboardButton('üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω', callback_data='baklagan')
        # mems = types.InlineKeyboardButton('üòÇ –ú–µ–º—ã (–ü–∏–∑–¥–µ—Ü —Å–º–µ—à–Ω–æ)', callback_data='mems')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup_start.add(predmet, raspisan, raspisan_all, raspisan_call, top, baklagan)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        text_back_menu = f'''üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚åµ\n
<b>‚ï≠ Username:</b> <code>{call.message.from_user.username}</code>
<b>‚îú User ID:</b> <code>{call.message.from_user.id}</code>
<b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
        '''
        photo_start = open('start.jpg', 'rb')
        msg_start = bot.send_photo(call.message.chat.id, photo_start, caption=text_back_menu, parse_mode='HTML',
                                   reply_markup=markup_start)

        bot_data[call.message.chat.id] = {
            'message_id': msg_start.message_id,
            'photo': photo_start
        }

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

#         text_start = f'''üèõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚åµ\n
# <b>‚ï≠ Username:</b> <code>{call.message.from_user.username}</code>
# <b>‚îú User ID:</b> <code>{call.message.from_user.id}</code>
# <b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
#         '''
#         photo_start = open('start.jpg', 'rb')
#
#         time.sleep(2)
#
#         msg_start = bot.send_photo(call.message.chat.id, photo_start, caption=text_start, parse_mode='HTML',
#                                    reply_markup=markup_start)
#
#         bot_data[call.message.chat.id] = {
#             'message_id': msg_start.message_id,
#             'photo': photo_start
#         }

    if call.data == 'raspisan_call':
        raspisan_call = '''<b>–†–∞—Å–ø–∏—Å–∞–Ω–∞–∏–µ –∑–≤–æ–Ω–∫–æ–≤</b>
        
1) 8:30 - 9:15
2) 9:35 - 10:20
3) 10:40 - 11:25
4) 11:40 - 12:25
5) 12:45 - 13:30
6) 13:40 - 14:25
7) 14:30 - 15:15
8) 15:20 - 16:05'''
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=raspisan_call, parse_mode='HTML', reply_markup=call.message.reply_markup)

    if call.data == 'teoria':
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption="–£ –º–µ–Ω—è –µ—ë –Ω–µ—Ç—É", parse_mode='HTML', reply_markup=call.message.reply_markup)

    if call.data == 'baklagan':
        text = f'''–ü—Ä–æ—Ñ–∏–ª—å üëî\n
<b>‚ï≠ Username:</b> <code>{call.from_user.username}</code>
<b>‚îú User ID:</b> <code>{call.from_user.id}</code>
<b>‚ï∞ Balance:</b> <code>{user_balances[user_id]} üçÜ</code>\n
'''

        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å üçÜ")
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

    if call.data == 'top':
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        sorted_balances = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–ª–∏ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ, –∫–∞–∫ –Ω—É–∂–Ω–æ)
        top_users = sorted_balances[:30]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø–∞
        text = '‚≠êÔ∏è –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚≠êÔ∏è\n\n'
        for i, (user_id, balance) in enumerate(top_users, start=1):
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –µ–≥–æ user_id, –µ—Å–ª–∏ username –Ω–µ—Ç
            username = bot.get_chat(user_id).username or f'User {user_id}'
            text += f"<b>{i}. @{username}</b>\n"
            text += f"<b>‚îú User ID:</b> <code>{user_id}</code>\n"
            text += f"<b>‚ï∞ Balance:</b> <code>{balance} üçÜ</code>\n\n"

        bot.answer_callback_query(call.id, "‚≠êÔ∏è –¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚≠êÔ∏è")
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

    ###############################–ü–†–ï–î–ú–ï–¢–´###############################

    # algebra = types.InlineKeyboardButton("‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó", callback_data='algebra')
    # geometria = types.InlineKeyboardButton("üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è", callback_data='geometria')
    # russ = types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='russ')
    # english = types.InlineKeyboardButton("üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='english')
    # phisic = types.InlineKeyboardButton("‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé", callback_data='phisic')
    # himia = types.InlineKeyboardButton("üë©‚Äçüî¨–•–∏–º–∏—è", callback_data='himia')


    if call.data == "algebra":
        bot.answer_callback_query(call.id, "‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó")

        text = f'''‚ûï‚ûñ–ê–ª–≥–µ–±—Ä–∞‚úñÔ∏è‚ûó
        
<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–Ω–µ–Ω–∏—è: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_algbra)

    if call.data == 'geometria':
        bot.answer_callback_query(call.id,"üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è")

        text = f'''üìê–ì–µ–æ–º–µ—Ç—Ä–∏—è

<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–Ω–µ–Ω–∏—è: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_geometria)

    if call.data == 'russ':
        bot.answer_callback_query(call.id, "üá∑üá∫ –†—É—Å—Å–∫–∏–π")

        text = f'''üá∑üá∫ –†—É—Å—Å–∫–∏–π

<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–Ω–µ–Ω–∏—è: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_russ)


    if call.data == 'english':
        bot.answer_callback_query(call.id, 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π')

        text = f'''üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π

<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_english)

    if call.data == 'phisic':
        bot.answer_callback_query(call.id, '‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé')

        text = f'''‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé

<b>–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup()
        upr = types.InlineKeyboardButton("‚öõÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data='upr')
        questshens = types.InlineKeyboardButton("üçé –í–æ–ø—Ä–æ—Å—ã", callback_data='questshens')
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(upr, questshens)
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

    if call.data == 'upr':
        text = f'''‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé --> ‚Ññ–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–Ω–µ–Ω–∏—è: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='phisic')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_phisic_upr)


    if call.data == 'questshens':
        text = f'''‚öõÔ∏è–§–∏–∑–∏–∫–∞üçé --> –í–æ–ø—Ä–æ—Å—ã?

<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä ¬ß–ü–∞—Ä–∞–≥—Ä–∞—Ñ–∞: </b>\n'''

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='phisic')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        bot.register_next_step_handler(call.message, get_exercise_number_phisic_questshens)


    if call.data == 'himia':
        bot.answer_callback_query(call.id, 'üë©‚Äçüî¨–•–∏–º–∏—è')
#
#         text = f'''üë©‚Äçüî¨–•–∏–º–∏—è
#
# <b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —É–ø—Ä–∞–Ω–µ–Ω–∏—è: </b>\n'''

        text =  f'''üë©‚Äçüî¨–•–∏–º–∏—è

<b>–Ø –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª</b>\n'''
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='predmet')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)

        # bot.register_next_step_handler(call.message, get_exercise_number_himia)

    ###############################–ú–ï–ú–´###############################

    # if call.data == 'mems':
    #     time.sleep(1)
    #     bot.answer_callback_query(call.id, '–ú–µ–º—ã üòÇ (–ü–ò–ò–ò–ó–î–ï–¶ –°–ï–ú–ï–®–ù–û üóø)')

    if call.data == 'dz':
        bot.answer_callback_query(call.id, 'üè´ –î/–ó')

        text = f'''üè´ –î/–ó

<b>–Ø –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª</b>\n'''
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup_predmet.add(back)

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=text, parse_mode='HTML', reply_markup=markup_predmet)


def get_exercise_number_algbra(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://reshak.ru/otvet/reshebniki.php?otvet={exercise_number}&predmet=kolyagin9"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_algbra)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_geometria(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://pomogalka.me/7-klass/geometriya/atanasyan/nomer-{exercise_number}/"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_algbra)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_russ(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://pomogalka.me/9-klass/russkij-yazyk/razumovskaja/uprazhnenie-{exercise_number}/"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_algbra)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_english(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://pomogalka.me/9-klass/anglijskij-yazyk/spotlight/2023-stranica-{exercise_number}/"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_algbra)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_phisic_upr(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://reshak.ru/otvet/reshebniki.php?otvet=new/Upr/{exercise_number}&predmet=per9"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_phisic_upr)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_phisic_questshens(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://reshak.ru/otvet/reshebniki.php?otvet=new/paragraph/{exercise_number}&predmet=per9"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_phisic_questshens)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞


def get_exercise_number_himia(message):
    exercise_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise_number.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        link = f"https://reshak.ru/otvet/reshebniki.php?otvet={exercise_number}&predmet=kolyagin9"

        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        bot.send_message(message.chat.id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n {link}", reply_markup=markup_predmet)

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        markup_predmet = types.InlineKeyboardMarkup(row_width=1)
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu_')
        markup_predmet.add(back)

        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=markup_predmet)
        bot.register_next_step_handler(message, get_exercise_number_algbra)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞

bot.polling(none_stop=True)
